esphome:
  name: mulbetet
  platform: ESP8266
  board: d1_mini

<<: !include wifi.yaml

mqtt:
  broker: aceone.se
  username: !secret mqtt.username
  password: !secret mqtt.password


# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api.password

ota:
  password: !secret ota.password

dallas:
  - pin: D1
    update_interval: 30s
    
sensor:
  - platform: pulse_counter
    # update_interval: never
    id: mainPower
    device_class: power
    pin: 
      number: D2
      mode: INPUT_PULLUP
    name: 'Main Power'
    icon: mdi:power-plug
    unit_of_measurement: 'kW'
    accuracy_decimals: 4
    filters:
      - multiply: 0.06
    total:
      id: mainEnergy
      device_class: energy
      name: 'Main Energy'
      icon: mdi:flash
      unit_of_measurement: 'Wh'
      accuracy_decimals: 2
      filters:
        - multiply: 1
      on_value:
        then:
          - component.update: heaterPower
        
  - platform: pulse_counter
    update_interval: never
    id: heaterPower
    device_class: power
    pin: 
      number: D3
      mode: INPUT_PULLUP
    name: 'Heater Power'
    icon: mdi:power-plug
    unit_of_measurement: 'kW'
    accuracy_decimals: 4
    filters:
      - multiply: 0.006
    on_value:
      then:
        # - component.update: mainPower
        - logger.log:
            format: "main power value: %.4f and heater power: %.4f"
            args: [ 'id(mainPower).state', 'id(heaterPower).state' ]
        - sensor.template.publish:
            id: housePower
            state: !lambda 'return id(mainPower).state - id(heaterPower).state;'                
    total:
      id: heaterEnergy
      device_class: energy
      name: 'Heater Energy'
      icon: mdi:flash
      unit_of_measurement: 'Wh'
      accuracy_decimals: 2
      filters:
        - multiply: 0.1        
      on_value:
        then:
          - logger.log:
              format: "main_energy value: %.2f and heater_energy: %.2f"
              args: [ 'id(mainEnergy).state', 'id(heaterEnergy).state' ]
          - sensor.template.publish:
              id: houseEnergy
              state: !lambda 'return id(mainEnergy).state - id(heaterEnergy).state;'                
            
  - platform: template 
    id: housePower
    device_class: power
    state_class: 'measurement'
    name: 'House Power'
    icon: mdi:power-plug
    unit_of_measurement: 'kW' 
    accuracy_decimals: 4
    update_interval: never
    on_value:
      then:
        - logger.log:
            format: "house_power value: %.4f"
            args: ['x' ]
     
  - platform: template 
    id: houseEnergy
    device_class: energy
    state_class: 'measurement'
    name: 'House Energy'
    icon: mdi:flash
    unit_of_measurement: 'Wh' 
    accuracy_decimals: 2
    update_interval: never
    on_value:
      then:
        - logger.log:
            format: "house_energy value: %.2f"
            args: [ 'x' ]

  - platform: dallas
    address: 0x5E0008025BD2EF10
    name: "Livingroom"
    resolution: 10
    unit_of_measurement: 째C
    accuracy_decimals: 2
    filters:
      - lambda: if(x<85){return x;} else return {};

  - platform: dallas
    address: 0x28FF3E4C310400D2
    name: "Sauna"
    resolution: 10
    unit_of_measurement: 째C
    accuracy_decimals: 2
    filters:
      - lambda: if(x<85){return x;} else return {};

  - platform: dallas
    address: 0xFF0008025BBC6410
    # address: 0xFF0008025BBC6410
    name: "Basement"
    resolution: 10
    unit_of_measurement: 째C
    accuracy_decimals: 2
    filters:
      - lambda: if(x<85){return x;} else return {};

  - platform: dallas
    address: 0x470008025BC65310
    name: "Outside"
    resolution: 10
    unit_of_measurement: 째C
    accuracy_decimals: 2
    filters:
      - lambda: if(x<85){return x;} else return {};
